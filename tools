function Show-Menu {
    param (
        [string]$Title = 'TOOLS MICROSOFT 365 BY DUY'
    )
    Clear-Host
    Write-Host "================ $Title ================" -ForegroundColor Yellow
    Write-Host "Tenant: $newEmail`n" -ForegroundColor Yellow
    Write-Host "1: Add New Domain" -ForegroundColor Yellow
    Write-Host "2: Enable Internal Relay" -ForegroundColor Yellow
    Write-Host "3: Check Message Trace" -ForegroundColor Yellow
    Write-Host "4: Check Message Detail" -ForegroundColor Yellow
    Write-Host "5: Check Message Quarantine" -ForegroundColor Yellow
    Write-Host "Q: Quit." -ForegroundColor Yellow
    Write-Host "========================================================`n" -ForegroundColor Yellow
}

Function Install_Modules {
    #Check for EXO v2 module inatallation
    $Module = Get-Module ExchangeOnlineManagement -ListAvailable
    if ($Module.count -eq 0) { 
        Write-Host Exchange Online PowerShell V2 module is not available  -ForegroundColor yellow  
        $Confirm = Read-Host Are you sure you want to install module? [Y] Yes [N] No 
        if ($Confirm -match "[yY]") { 
            Write-host "Installing Exchange Online PowerShell module"
            Install-Module ExchangeOnlineManagement -Repository PSGallery -AllowClobber -Force
            Import-Module ExchangeOnlineManagement
        } 
        else { 
            Write-Host EXO V2 module is required to connect Exchange Online.Please install module using Install-Module ExchangeOnlineManagement cmdlet. 
            Exit
        }
    }  

    if ($OnlyOrganizationUsers.IsPresent) {
        #Check for Azure AD module
        $Module = Get-Module MsOnline -ListAvailable
        if ($Module.count -eq 0) { 
            Write-Host MSOnline module is not available  -ForegroundColor yellow  
            $Confirm = Read-Host Are you sure you want to install the module? [Y] Yes [N] No 
            if ($Confirm -match "[yY]") { 
                Write-host "Installing MSOnline PowerShell module"
                Install-Module MSOnline -Repository PSGallery -AllowClobber -Force
                Import-Module MSOnline
            } 
            else { 
                Write-Host MSOnline module is required to generate the report.Please install module using Install-Module MSOnline cmdlet. 
                Exit
            }
        }
        $Module = Get-Module -Name AzureAD -ListAvailable
        if ($Module.count -eq 0) { 
            Write-Host AzureAD module is not available  -ForegroundColor yellow  
            $Confirm = Read-Host Are you sure you want to install the module? [Y] Yes [N] No 
            if ($Confirm -match "[yY]") { 
                Write-host "Installing AzureAD PowerShell module"
                Install-Module AzureAD -Repository PSGallery -Force
            } 
            else { 
                Write-Host MSOnline module is required to generate the report.Please install module using Install-Module MSOnline cmdlet. 
                Exit
            }
        }
    }
}

# Tạo random cho ten file khong bi trung lap
function Generate-RandomString {
    param (
        [int]$length
    )

    $characters = "abcdefghiklmnopkrstxyz0123456789"
    $randomString = -join ((Get-Random -Count $length -InputObject $characters.ToCharArray()))
    return $randomString
}
$randomString = Generate-RandomString -length 5

function Clear-And-Write-Header {
    Clear-Host
    Write-Host "=================== ADD DOMAIN TO 365 : PRO$serverNumber =====================" -ForegroundColor Yellow
}

function Enable-InternalRelay {
    Write-Host "Dang load danh sach..."
    # Lấy danh sách các tên miền không phải là Authoritative
    $nonAuthoritativeDomains = Get-AcceptedDomain | Where-Object { $_.DomainType -eq 'Authoritative' }
    # Hiển thị danh sách tên miền trong GridView và cho phép chọn nhiều tên miền
    $selectedDomains = $nonAuthoritativeDomains | Out-GridView -Title "Chon domain" -OutputMode Multiple
    

    if ($selectedDomains -eq $null) {
        Write-Host "Ban da huy chon ten mien." -ForegroundColor Yellow
        return
    }

    # Hiển thị danh sách các tên miền đã chọn
    Write-Host "Danh sach ten mien da chon:"
    $selectedDomains | ForEach-Object { Write-Host $_.Name }

    # Xác nhận từ người dùng trước khi thực hiện hành động
    $confirmation = Read-Host "Ban co muon bat Internal Relay cho cac ten mien ban chon khong? (Y/N)"
    $reasonTicket = Read-Host "Nhap li do"
    if ($confirmation -ne 'Y') {
        Write-Host "Ban da huy bo thao tac." -ForegroundColor Yellow
        return
    }

    foreach ($selectedDomain in $selectedDomains) {
        $domainName = $selectedDomain.Name

        Write-Host "`nDang bat Internal Relay cho domain $domainName..." -ForegroundColor Yellow

        # Bật Internal Relay cho tên miền được chọn
        Set-AcceptedDomain -Identity $domainName -DomainType InternalRelay

        # Lưu thông tin vào tệp CSV
        $logData = [PSCustomObject]@{
            Domain = $domainName
            Date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Server = $newEmail
            Reason = $reasonTicket
        }
        $logData | Export-Csv -Path "C:\Users\PC\Documents\GitHub\sap_tools\scripts\scripts\log\enable_internalRelay.csv" -Append -NoTypeInformation

        Write-Host "Internal Relay da duoc bat cho domain $domainName." -ForegroundColor Green
    }
}



# Them domain vao 365
function add-New-Domain {
    # Nhap ten mien moi vao 365
    Clear-And-Write-Header
    $domainName = Read-Host -Prompt 'Nhap Domain Moi'
    try {
        New-MsolDomain -Name $domainName -ErrorAction Stop
    }
    catch {
        if ($_.Exception.Message -like '*already exists*') {
            Write-Host "`nTen mien da ton tai tren 365" -ForegroundColor Red
            $domainStatus = (Get-MsolDomain -DomainName $domainName).Status
            Write-Host "Trang thai : $domainStatus" -ForegroundColor Yellow
            if ($domainStatus -eq 'Verified') {
                return  
            }
        }
        else {
            Write-Host "`nLoi khong xac dinh: $($_.Exception.Message)" -ForegroundColor Red
            return  # Exit the script or function scope for any other error
        }
    }
    $verificationInfo = Get-MsolDomainVerificationDns -DomainName $domainName -Mode DnsTxtRecord
    Write-Host "`nVui long cau hinh DNS TXT de xac thuc" -ForegroundColor Yellow
    Write-Host "`nMa TXT de xac minh la : $($verificationInfo.Text)" -ForegroundColor Yellow 
    Write-Host "Da sao chep vao clipboard !`n"
    $verificationInfo.Text | Set-Clipboard

    $dnsConfigured = Read-Host -Prompt 'Ban da cau hinh DNS chua ? (Y/N)' 
  
    if ($dnsConfigured -eq 'Y') { 
        try {
            Write-Host "Dang xac thuc..." -ForegroundColor Yellow
            Start-Sleep -Seconds 3
            Confirm-MsolDomain -DomainName $domainName -ErrorAction Stop
            Write-Host "`nTen mien $domainName da duoc Verified." -ForegroundColor Yellow
        }
        catch {
            if ($_.Exception.Message -like '*CNAME*') {
                Write-Host "`nBan ghi DNS chua duoc phan giai. " -ForegroundColor Red
                return
            }
            if ($_.Exception.Message -like '*elsewhere in Office 365*') {
                Write-Host "`nTen mien da ton tai tren Tenant 365 khac. Vui long truy cap tenant kia va xoa domain, sau do tien hanh xac thuc lai" -ForegroundColor Red
                return 
            }
            else {
                Write-Host "`nXac minh ten mien that bai: $($_.Exception.Message)" -ForegroundColor Red
                return  # Exit the script or function scope for any other error
            }
        }
    }
    else {
        Write-Host "`nBan ghi DNS chua duoc phan giai. Vui long thu lai." -ForegroundColor Yellow
        return
    }
    
    
    # Lệnh dùng để get bản ghi MX 
    $mxDomain = (Get-AzureADDomainServiceConfigurationRecord -Name $domainName | where RecordType -eq MX).MailExchange
    # Hien thi Powershell theo dang Table
    $data = @(
        [PSCustomObject]@{Name = '@'; Type = 'MX'; TTL = '3600'; Data = "0 $mxDomain." },
        [PSCustomObject]@{Name = 'autodiscover'; Type = 'CNAME'; TTL = '3600'; Data = 'autodiscover.outlook.com.' },
        [PSCustomObject]@{Name = '@'; Type = 'TXT'; TTL = '3600'; Data = 'v=spf1 mx include:emailserver.vn include:spf.protection.outlook.com -all' }
    )
    
    Clear-And-Write-Header
    Write-Host "`n======= CAU HINH DNS RECORD - $domainName ================="  -ForegroundColor Yellow
    $data | Format-Table 
    Write-Host "============================================================="  -ForegroundColor Yellow
    
    Write-Host "Khi cau hinh DNS hoan tat --> Truy cap trang tenant 365 chuyen sang trang thai HEALTHY"  -ForegroundColor Green
                
    Write-Host "ENABLE INTERNAL RELAY !"
    Enable-InternalRelay
}


function Get-TenantIdFromDomain {
    param (
        [Parameter(Mandatory = $true)]
        [string]$domain
    )

    $metadataUrl = "https://login.windows.net/$domain/.well-known/openid-configuration"
    try {
        $metadata = Invoke-RestMethod -Uri $metadataUrl
        $tenantId = $metadata.issuer -replace "https://sts.windows.net/", "" -replace "/$"
        return $tenantId
    }
    catch {
        Write-Error "Loi conenct domain $domain . Error: $_"
    }
}

function Get-DomainFromTenantId {
    param (
        [Parameter(Mandatory = $true)]
        [string]$tenantId,
        [Parameter(Mandatory = $true)]
        [string]$csvFilePath
    )

    try {
        $csvData = Import-Csv -Path $csvFilePath
        $domain = $csvData | Where-Object { $_.ID -eq $tenantId } | Select-Object -ExpandProperty Tenant

        if ($domain) {
            return $domain
        }
        else {
            return "Domain khong thuoc SAP"
        }
    }
    catch {
        Write-Host "An error occurred: $($_.Exception.Message)"
        throw $_.Exception.Message
    }
}

function check-TenantID {
    $csvFilePath = './scripts/data/data_tenant.csv' 
    do {
        try {
            Clear-Host
            Write-Host "================ CHECK TENANT ID ================`n" -ForegroundColor Yellow
            $domainInput = Read-Host -Prompt 'Nhap Domain/Tenant'
            $domainInput = $domainInput.Replace(' ', '')
            if ($domainInput -notmatch '^[a-zA-Z0-9.-]+$') {
                throw "Error: Domain chua ki tu khong hop le"
            }
            $tenantId = Get-TenantIdFromDomain -domain $domainInput -ErrorAction Stop
            $domainResult = Get-DomainFromTenantId -tenantId $tenantId -csvFilePath $csvFilePath
            Write-Host "`nDomain :$domainInput" -ForegroundColor Yellow
            Write-Host "Tenant : $domainResult" -ForegroundColor Yellow
            Write-Host "IDTenant : $tenantId`n" -ForegroundColor Yellow
        }
        catch {
            if ($_.Exception.Message -like '*not found*') {
                Write-Host "Error: Domain chua connect 365 !" -ForegroundColor Red
            }
            else {
                Write-Host $_.Exception.Message -ForegroundColor Red
            }
        }
    } while (Confirm-Continue)
      
}

function Confirm-Continue {
    $userInput = Read-Host "Ban co muon tiep tuc ? (Y/N)"
    if ($userInput -eq 'Y') {
        Clear-Host
        return $true
    }
    elseif ($userInput -eq 'N') {
        return $false
    }
    else {
        Write-Host "Input khong hop le. Nhap lai Y hoac N."
        return Confirm-Continue
    }
}

# Xoa domain khoi 365
function remove-Domain {
    Clear-Host
    do {
        Write-Host "=================== REMOVE DOMAIN FROM 365 =====================" -ForegroundColor Yellow
    
        $domainName = Read-Host "`nNhap domain can xoa "
    
        # Lấy thông tin tên miền và hiển thị kết quả
        try {
            $domainInfo = Get-MsolDomain -DomainName $domainName -ErrorAction Stop | Select-Object Name, Status
            Write-Host "`nThong tin ve ten mien $domainName" -ForegroundColor Cyan
            $domainInfo
            $domainExists = $true
        }
        catch {
            Clear-Host
            Write-Host "`nDomain $domainName khong ton tai trong Office 365." -ForegroundColor Yellow
            $continue = Read-Host "`nBan co muon tiep tuc? (Y/N)"
            if ($continue -eq 'Y') {
                $domainExists = $false
            }
            else {
                return
            }
        }
    } while (!$domainExists)
    
    $confirmation = Read-Host "`nBan co chac chan muon xoa ten mien nay khoi 365 khong ? (Y/N)"
    $reasonTicket = Read-Host -Prompt 'Nhap li do'
    if ($confirmation -eq 'Y') {
        Write-Host "Lenh se duoc thuc thi trong vong 5 giay" -ForegroundColor Red
        Start-Sleep -Seconds 5
    
        # Xóa tên miền
        try {
            Remove-MsolDomain -DomainName $domainName -Force -ErrorAction Stop
            Write-Host "`nTen mien $domainName da duoc xoa." -ForegroundColor Yellow
            $logData = [PSCustomObject]@{
                Domain = $domainName
                Date   = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                Server = $newEmail
                Reason = $reasonTicket
            }
            $logData | Export-Csv -Path "C:\Users\PC\Documents\GitHub\sap_tools\scripts\scripts\log\remove_Domain.csv" -Append -NoTypeInformation
        }
        catch {
            Write-Host "`nTen mien $domainName chua duoc xoa. Vui long kiem tra Name,Alias dang su dung ten" -ForegroundColor Red
        }
    }
    else {
        Write-Host "Lenh xoa ten mien da duoc huy."
    }
}

# Kiem tra chi tiet email
function Check-Message-Detail {
    Clear-Host
    Write-Host "Ban da chon :`n================ CHECK MESSAGES DETAIL ================`n" -ForegroundColor Yellow
    $continueCheck = $true
    while ($continueCheck) {
        $sender = Read-Host -Prompt 'Nhap Sender'
        if ([string]::IsNullOrEmpty($sender)) {
            $sender = $null
        }

        $recipient = Read-Host -Prompt 'Nhap Recipient'
        if ([string]::IsNullOrEmpty($recipient)) {
            $recipient = $null
        }

        $messageId = Read-Host "Nhap Message ID"
        if ([string]::IsNullOrEmpty($messageId)) {
            $messageId = $null
        }

        for ($i = 1; $i -le 10; $i++) {
            $startDateFormatted = (Get-Date).AddDays(-7).ToString("yyyy-MM-ddTHH:mm:ssZ")
            $endDateFormatted = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            $messageTraceCommand = "Get-MessageTrace -StartDate $startDateFormatted -EndDate $endDateFormatted -Page $i -PageSize 5000"
                    
            if ($null -ne $sender) {
                $messageTraceCommand += " -SenderAddress $sender"
            }
                
            if ($null -ne $recipient) {
                $messageTraceCommand += " -RecipientAddress $recipient"
            }

            if ($messageId -ne $null) {
                $messageTraceCommand += " -MessageId $messageId"
            }

            $messageTracePage = Invoke-Expression $messageTraceCommand
            if ($messageTracePage) {
                $messageTracePage | Get-MessageTraceDetail | ForEach-Object {
                    $_.Date = $_.Date.ToLocalTime().AddHours(0)
                    $_
                } | Out-GridView
            }
        }
        $choice = Read-Host "`nBan co muon tiep tuc check ? (Y/N)"
        if ($choice -ne "Y") {
            $continueCheck = $false
        }
    }
}
function Header-Messages-Trace {
    Write-Host "================ CHECK MESSAGE TRACE ================`n" -ForegroundColor Yellow
}
function Check-Message-Trace {

    Clear-Host
    Header-Messages-Trace
    # Nhập ngày bắt đầu và ngày kết thúc
    do {
        try {
            $startDateInput = Read-Host -Prompt 'Nhap ngay bat dau (Vi du:8/12)'
            $endDateInput = Read-Host -Prompt 'Nhap ngay ket thuc (Vi du:14/12)'
    
            # Chuyển đổi ngày nhập vào thành định dạng ngày
            $startDate = if ($startDateInput) { [datetime]::ParseExact("$startDateInput/$((Get-Date).Year)", "d/M/yyyy", $null) } else { (Get-Date).AddDays(-7) }
            $endDate = if ($endDateInput) { [datetime]::ParseExact("$endDateInput/$((Get-Date).Year)", "d/M/yyyy", $null) } else { Get-Date }
    
            if ($endDate -lt $startDate) {
                Clear-Host
                Header-Messages-Trace
                throw "Ngay ket thuc khong duoc phep truoc ngay bat dau`n"
            }
    
            if ((Get-Date) - $startDate -gt [TimeSpan]::FromDays(10)) {
                Clear-Host
                Header-Messages-Trace
                throw "Ngay bat dau khong duoc qua 10 ngay so voi thoi diem hien tai`n"
            }
    
            $errorOccurred = $false
        }
        catch {
            Write-Host "Loi: $_" -ForegroundColor Red
            $errorOccurred = $true
        }
    } while ($errorOccurred)
    
    $sender = Read-Host -Prompt 'Nhap Sender'
    if ([string]::IsNullOrEmpty($sender)) {
        $sender = $null
    }
    
    $recipient = Read-Host -Prompt 'Nhap Recipient'
    if ([string]::IsNullOrEmpty($recipient)) {
        $recipient = $null
    }
    
    $messageTraceRecipient = @()
    for ($i = 1; $i -le 10; $i++) {
        $startDateFormatted = $startDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
        $endDateFormatted = $endDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
        $messageTraceCommand = "Get-MessageTrace -StartDate $startDateFormatted -EndDate $endDateFormatted -Page $i -PageSize 5000"
    
        if ($null -ne $sender) {
            $messageTraceCommand += " -SenderAddress $sender"
        }
    
        if ($null -ne $recipient) {
            $messageTraceCommand += " -RecipientAddress $recipient"
        }
    
        $messageTracePage = Invoke-Expression $messageTraceCommand
        $messageTraceRecipient += $messageTracePage
    }
    
    $messageTraceRecipientUpdated = $messageTraceRecipient | ForEach-Object {
        $_.Received = $_.Received.ToUniversalTime().AddHours(14)
        $_.MessageId = $_.MessageId -replace '[<>]', ''
        $_ | Select-Object MessageId, Received, SenderAddress, RecipientAddress, Subject, Status, FromIP, ToIP, Size
    }
    
    Clear-Host
    Header-Messages-Trace
    Write-Host "1: Xem Grid View" -ForegroundColor Yellow
    Write-Host "2: Download file CSV" -ForegroundColor Yellow
    Write-Host "=====================================================`n" -ForegroundColor Yellow
    $choice = Read-Host "`nVui long nhap so"
    
    switch ($choice) {
        '1' {
            Clear-Host
            Write-Host "Ban dang xem dang Grid View`n"-ForegroundColor Yellow
            $messageTraceRecipientUpdated | Out-GridView
        
            do {
                # Clear-Host
                Header-Messages-Trace
                Write-Host "2: Download file CSV"-ForegroundColor Yellow
                Write-Host "0: Menu Chinh"-ForegroundColor Yellow
                Write-Host "=====================================================`n"-ForegroundColor Yellow
                $subChoice = Read-Host "`nVui long nhap so"
        
                switch ($subChoice) {
                    '2' {
                        $messageTraceRecipientUpdated | ConvertTo-Csv -NoTypeInformation | Out-File -FilePath "$folderPath/log_$sender_$recipient_$randomString.csv" -Encoding utf8
                        Clear-Host
                        Write-Host "`nFile da duoc download tai: $folderPath/log_$sender_$recipient_$randomString.csv`n"-ForegroundColor Yellow
                        break
                    }
                    '0' {
                        break
                    }
                    default {
                        Clear-Host
                        Write-Host "`nLua chon khong hop le. Vui long nhap lai"-ForegroundColor Yellow
                    }
                }
            } while ($subChoice -ne '0')
        }
        '2' {
            $messageTraceRecipientUpdated | ConvertTo-Csv -NoTypeInformation | Out-File -FilePath "$folderPath/log_$sender_$recipient_$randomString.csv" -Encoding utf8
            Clear-Host
            Write-Host "`nFile da duoc download tai: $folderPath/log_$sender_$recipient_$randomString.csv`n"-ForegroundColor Yellow
        
            do {
                Header-Messages-Trace
                Write-Host "1: Xem Grid View"-ForegroundColor Yellow
                Write-Host "0: Menu Chinh"-ForegroundColor Yellow
                Write-Host "=====================================================`n"-ForegroundColor Yellow
    
                $subChoice = Read-Host "Vui long nhap so"
        
                switch ($subChoice) {
                    '1' {
                        $messageTraceRecipientUpdated | Out-GridView
                        break
                    }
                    '0' {
                        break
                    }
                    default {
                        
                        Clear-Host
                        Write-Host "`nLua chon khong hop le. Vui long nhap lai"-ForegroundColor Yellow
                    }
                }
            } while ($subChoice -ne '0')
        }
    }
    
}
function Check-Relase-Quarantine {
    Clear-Host
    Write-Host "Ban da chon :`n================ CHECK MESSAGES QUARANTINE ================`n" -ForegroundColor Yellow

    $quarantineCheck = $true
    while ($quarantineCheck) {
        $sender = Read-Host -Prompt 'Nhap Sender'
        if ([string]::IsNullOrEmpty($sender)) {
            $sender = $null
        }

        $recipient = Read-Host -Prompt 'Nhap Recipient'
        if ([string]::IsNullOrEmpty($recipient)) {
            $recipient = $null
        }

        for ($i = 1; $i -le 10; $i++) {
            $quarantineCommand = "Get-QuarantineMessage -Page $i -PageSize 1000"
            if ($sender -ne $null) {
                $quarantineCommand += " -SenderAddress $sender"
            }
            if ($recipient -ne $null) {
                $quarantineCommand += " -RecipientAddress $recipient"
            }
            $quarantineMessages = Invoke-Expression $quarantineCommand
            if ($quarantineMessages) {
                $quarantinedMessages = $quarantineMessages | ForEach-Object {
                    $messageDetails = Get-QuarantineMessage -Identity $_.Identity
                    $_.ReceivedTime = $_.ReceivedTime.ToLocalTime().AddHours(7)
                    $_.RecipientAddress = $messageDetails.RecipientAddress
                    $_.MessageId = $_.MessageId -replace '[<>]', ''
                    $_
                }
                $outputOption = Read-Host -Prompt 'Ban muon tai File CSV (1) hay xem Grid View (2) ? (1/2)'
                if ($outputOption -eq '1') {
                    $quarantinedMessages | Select-Object MessageId, ReceivedTime, SenderAddress, RecipientAddress, Subject, Type, ReleaseStatus, Expires, Size, Direction, PolicyName | Export-Csv -Path "$folderPath/quarantine_$randomString.csv" -NoTypeInformation
                }
                elseif ($outputOption -eq '2') {
                    $quarantinedMessages | Select-Object ReceivedTime, SenderAddress, RecipientAddress, Subject, Type, ReleaseStatus, Expires, Size, Direction, PolicyName | Out-GridView
                }
            }
        }
        $quarantineCheck = $false
    }

    Clear-Host
    Write-Host "================ RELASE QUARANTINE ================`n" -ForegroundColor Yellow

    do {
        $sender2 = Read-Host -Prompt 'Nhap Sender'
        $recipient2 = Read-Host -Prompt 'Nhap Recipient'

        if ([string]::IsNullOrEmpty($sender2) -or [string]::IsNullOrEmpty($recipient2)) {
            Write-Host "Ban nhap khong du thong tin"
            $continue = Read-Host -Prompt 'Ban co muon tiep tuc? (Y/N)'
            if ($continue -ne 'Y') {
                break
            }
        }
        else {
            $startDate = (Get-Date).AddDays(-7)
            $endDate = Get-Date

            try {
                $quarantineMessages = Get-QuarantineMessage  -StartReceivedDate $startDate -EndReceivedDate $endDate -SenderAddress $sender2 -RecipientAddress $recipient2
                if ($quarantineMessages) {
                    $quarantineMessages | Release-QuarantineMessage -ReleaseToAll
                    Write-Host "`nGiai phong thanh cong"
                    Get-QuarantineMessage -ReleaseStatus Released -SenderAddress $sender2 -RecipientAddress $recipient2 | Out-GridView
                }
                else {
                    Write-Host "`nKhong tim thay mail trong quarantine" -ForegroundColor Yellow
                }
            }
            catch {
                Write-Host "`nLoi khi giai phong email: $_" -ForegroundColor Red
            }

            $continue = Read-Host -Prompt 'Ban co muon tiep tuc? (Y/N)'
            if ($continue -ne 'Y') {
                break
            }
        }
    } while ($true)

}

$folderDate = Get-Date -Format "MM.dd.yyyy"
$folderPath = "./LOG_HERE/log_$folderDate"
if (!(Test-Path -Path $folderPath)) {
    New-Item -ItemType Directory -Path $folderPath
}


Install_Modules
Clear-Host
$serverNumber = Read-Host -Prompt 'Nhap Server'

try {
    if ($serverNumber -eq '=') {
        check-TenantID
        Exit
    }
    elseif ($serverNumber.EndsWith(".p")) {
        $password = Read-Host -Prompt 'Nhap mat khau'
        $newEmail = $serverNumber -replace '\.p$'
        Write-Host $newEmail
        $credential = New-Object System.Management.Automation.PSCredential -ArgumentList @($newEmail, (ConvertTo-SecureString -String $password -AsPlainText -Force))
    }
    else {
        $email = "admin@proXXx01.onmicrosoft.com"
        $newEmail = $email.Replace('XX', $serverNumber)
        $password = Read-Host -Prompt 'Nhap mat khau'
        Write-Host $newEmail
        $credential = New-Object System.Management.Automation.PSCredential -ArgumentList @($newEmail, (ConvertTo-SecureString -String $password -AsPlainText -Force))
    }

    $scriptBlock = {
        Connect-ExchangeOnline -Credential $credential
    }
    
    # Thực hiện script block để bắt lỗi
    Invoke-Command -ScriptBlock $scriptBlock
}
catch {
    if ($_.Exception.Message -like '*invalid username or password*') {
        Write-Host "Error: Sai mat khau roi cha noi." -ForegroundColor Red
    }
    else {
        Write-Host "Error: $_."
    }
    Exit
}

Connect-MsolService -Credential $credential
Connect-AzureAD -Credential $credential


do { 
    Show-Menu
    $input = Read-Host "`nNhap lua chon"
    switch ($input) {
        '1' {
            add-New-Domain
        }
        '2' {
            Clear-Host
            Write-Host "Ban da chon :`n================ ENABLE INTERNAL RELAY ================`n" -ForegroundColor Yellow
            Enable-InternalRelay
        }
        '3' {
            Check-Message-Trace 
        }
        '4' {
            Check-Message-Detail
        }
        '5' {
            Check-Relase-Quarantine
        }
        '-1' {
            remove-Domain
        }
        'q' {
            return
        }
    }
    pause
}
until ($input -eq 'q')
